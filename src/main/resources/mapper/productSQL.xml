<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="product">
	<!-- 재건 -->
	<select id="selectClassList" resultType="pro">
    select * from
    (select rownum as rnum, b.* from
    (
    select 
    product_no as productNo, 
    expert_no as expertNo,
    expert_name as expertName,
    member_picturePath as memberPicturePath,
    member_no as memberNo, 
    product_Category as productCategory,
    product_title as productTitle,
    product_Intro as productIntro,
    member_picturename as memberPicturename,
    product_Tag as productTag,
    cost,
    sale,
    (cost)*(sale)/100 as salecost,
    (select nvl(count(*),0) from review_tbl rev where rev.product_no = p.product_no) as revCount,
    (select ROUND(avg(nvl(review_star, 0)),1) from review_tbl rev where rev.product_no = p.product_no)as reviewStar,
    product_imgpath as productImgPath,
    product_Imgename as productImgname
    from product_tbl p
    join expert_tbl e using (expert_no)
    join member_tbl using(member_no)
<choose>
        <when test="selPro!='전체'.toString()">    <!-- 카테고리 지정 -->
            where product_Category=#{selPro} and product_type = 2
        </when>
        <otherwise>
            where product_type = 2
        </otherwise>
    </choose>
    order by product_no desc)b)
    where rnum between #{start} and #{end}
    </select>
    
    <!-- 재건 -->
	<select id="selectExpertList" resultType="pro">
     select * from
    (select rownum as rnum, b.* from
    (
    select 
    product_no as productNo, 
    expert_no as expertNo,
    expert_name as expertName,
    member_picturePath as memberPicturePath,
    member_no as memberNo, 
    product_Category as productCategory,
    product_title as productTitle,
    product_Intro as productIntro,
    member_picturename as memberPicturename,
    product_Tag as productTag,
    cost,
    sale,
    (cost)*(sale)/100 as salecost,
    (select nvl(count(*),0) from review_tbl rev where rev.product_no = p.product_no) as revCount,
    (select ROUND(avg(nvl(review_star, 0)),1) from review_tbl rev where rev.product_no = p.product_no)as reviewStar,
    product_imgpath as productImgPath,
    product_Imgename as productImgname
    from product_tbl p
    join expert_tbl e using (expert_no)
    join member_tbl using(member_no)
<choose>
        <when test="selPro!='전체'.toString()">    <!-- 카테고리 지정 -->
            where product_Category=#{selPro} and product_type = 1
        </when>
        <otherwise>
            where product_type = 1
        </otherwise>
    </choose>
    order by product_no desc)b)
    where rnum between #{start} and #{end}
    </select>
    
    <select id="selectIdeamarketList" resultType="pro">
    select * from
    (select rownum as rnum, b.* from
    (
    select 
    product_no as productNo, 
    expert_no as expertNo,
    expert_name as expertName,
    member_picturePath as memberPicturePath,
    member_no as memberNo, 
    product_Category as productCategory,
    product_title as productTitle,
    product_Intro as productIntro,
    member_picturename as memberPicturename,
    product_Tag as productTag,
    cost,
    sale,
    (cost)*(sale)/100 as salecost,
    (select nvl(count(*),0) from review_tbl rev where rev.product_no = p.product_no) as revCount,
    (select ROUND(avg(nvl(review_star, 0)),1) from review_tbl rev where rev.product_no = p.product_no)as reviewStar,
    product_imgpath as productImgPath,
    product_Imgename as productImgname
    from product_tbl p
    join expert_tbl e using (expert_no)
    join member_tbl using(member_no)
<choose>
        <when test="selPro!='전체'.toString()">    <!-- 카테고리 지정 -->
            where product_Category=#{selPro} and product_type = 3
        </when>
        <otherwise>
            where product_type = 3
        </otherwise>
    </choose>
    order by product_no desc)b)
    where rnum between #{start} and #{end}
    </select>
    
    
	<!-- 재건 -->
	<select id="selectSerchList" resultType="pro">
    select * from
    (select rownum as rnum, b.* from
    (
    select 
    product_no as productNo, 
    expert_no as expertNo,
    expert_name as expertName,
    member_picturePath as memberPicturePath,
    member_no as memberNo, 
    product_Category as productCategory,
    product_title as productTitle,
    product_Intro as productIntro,
    member_picturename as memberPicturename,
    product_Tag as productTag,
    cost,
    sale,
    (cost)*(sale)/100 as salecost,
    (select nvl(count(*),0) from review_tbl rev where rev.product_no = p.product_no) as revCount,
    (select ROUND(avg(nvl(review_star, 0)),1) from review_tbl rev where rev.product_no = p.product_no)as reviewStar,
    product_imgpath as productImgPath,
    product_Imgename as productImgname
    from product_tbl p
    join expert_tbl e using (expert_no)
    join member_tbl using(member_no)
<choose>
        <when test="selPro!='전체'.toString()">    <!-- 카테고리 지정 -->
            where product_Category=#{selPro} and product_type = 2
        </when>
        <otherwise>
            where product_type = 2
        </otherwise>
    </choose>
    order by product_no desc)b)
    where rnum between #{start} and #{end}
    </select>
    

<!-- 재건 -->
	<select id="selectExpTotalCount" resultType="int" parameterType="map">
		select count(*) from product_tbl
		<choose>
		<when test="!selPro.equals('전체')">
		 	where product_Category = #{selPro} and product_type = 1
		</when>
		<otherwise>
		where product_type = 1
		</otherwise>
		</choose>
  	</select>

	<!-- 재건 -->
	<select id="selectClsTotalCount" resultType="int" parameterType="map">
		select count(*) from product_tbl
		<choose>
		<when test="!selPro.equals('전체')">
		 	where product_Category = #{selPro} and product_type = 2
		</when>
		<otherwise>
		where product_type = 2
		</otherwise>
		</choose>
  	</select>
  
  <!-- 재건 -->
	<select id="selectIdmTotalCount" resultType="int" parameterType="map">
		select count(*) from product_tbl
		<choose>
		<when test="!selPro.equals('전체')">
		 	where product_Category = #{selPro} and product_type = 3
		</when>
		<otherwise>
		where product_type = 3
		</otherwise>
		</choose>
  	</select>
  
  <insert id="classWrite" parameterType="pro">
  		insert into
  			product_tbl values(
  			product_seq.nextval,
  			#{expertNo},
  			2,
  			#{productTitle},
  			#{productCategory},
  			#{productIntro},
  			#{productTag},
  			#{productContent},
  			#{cost},
  			#{productQst},
  			#{productAns},
  			#{productAddr},
  			#{sale},
  			#{productOption},
  			#{productImgPath},
  			#{productImgname}
  			)
  </insert>
  
    <insert id="expertWrite" parameterType="pro">
  		insert into
  			product_tbl values(
  			product_seq.nextval,
  			#{expertNo},
  			1,
  			#{productTitle},
  			#{productCategory},
  			#{productIntro},
  			#{productTag},
  			#{productContent},
  			#{cost},
  			#{productQst},
  			#{productAns},
  			#{productAddr},
  			#{sale},
  			#{productOption},
  			0,
  			0
  			)
  </insert>
  <insert id="ideamarketWrite" parameterType="pro">
	insert into
  			product_tbl values(
  			product_seq.nextval,
  			#{expertNo},
  			3,
  			#{productTitle},
  			#{productCategory},
  			#{productIntro},
  			#{productTag},
  			#{productContent},
  			#{cost},
  			#{productQst},
  			#{productAns},
  			#{productAddr},
  			#{sale},
  			#{productOption},
  			0,
  			0,
  			market_seq.nextval,
  			#{marketType},
  			#{marketPath},
  			#{marketName}
  			)
  
  </insert>
  <update id="productUpdate" parameterType="pro">
  update product_tbl set
  	product_title = #{productTitle},
  	product_intro = #{productIntro},
  	product_tag = #{productTag},
  	product_content = #{productContent},
  	cost = #{cost},
  	product_qst = #{productQst},
  	product_ans = #{productAns},
  	sale = #{sale},
  	product_option = #{productOption}
  	<if test="productImgPath != null">
  		,product_imgPath = #{productImgPath},
  		product_imgname = #{productImgname}
  	</if>
  	where product_no = #{productNo} and expert_no=#{expertNo}
  	</update>
  	
	<!-- 윤지 -->
	<select id="selectOneProduct" parameterType="int" resultType="pro">
		select
			product_no as productNo,
			product_type as productType,
			product_title as productTitle,
	        product_Category as productCategory,
			product_intro as productIntro,
			product_tag as productTag,
			product_content as productContent,
			cost,
			product_qst as productQst,
			product_ans as productAns,
			product_addr as productAddr,
			sale,
			product_option as productOption,
			product_imgpath as productImgPath
		from product_tbl 
        where product_no=#{productNo}
	</select>
	
	<insert id="insertIdeamarket" parameterType="map">
		insert into ideamarket_tbl values(
		ideamarket_seq.nextval,
		
		
		)
	</insert>
	<!-- 윤지 -->
	<select id="selectAllReview" parameterType="map" resultType="review">
		select 
			review_no as reviewNo, 
			pay_no as payNo, 
			member_no as memberNo, 
			review_title as reviewTitle, 
			review_content as reveiwContent, 
			review_star as reviewStar, 
			review_date as reviewDate, 
			product_no as productNo
		from (select rownum,n.* from(select * from review_tbl order by review_no desc)n) 
		where rownum between #{start} and #{end} and product_no=#{productNo}
	</select>
	
	<!-- 윤지 -->
	<select id="selectReviewCount" parameterType="int" resultType="int">
		select 
			count(*) as cnt 
		from review_tbl
		where product_no=#{productNo}
	</select>
	
	<!-- 윤지 -->
	<select id="selectReviewStar" parameterType="int" resultType="double">
		select 
			case when avg(review_star) is null then 0
         		 else avg(review_star)  
    		end review_star
		from review_tbl
		where product_no = #{productNo}
	</select>
	
	<!-- 윤지 -->
	<select id="selectPaymentExpertNoCount" parameterType="int" resultType="int">
		select 
			count(*) 
		from payment_tbl 
		where product_no=#{productNo}
	</select>
	
	<!-- 윤지 -->
	<select id="selectWishList" resultType="productWish">
 		select 
 			rnum, 
 			product_no as productNo, 
 			product_title as productTitle, 
 			wishcount,
 			expert_no as expertNo,
 			product_type as productType
 		from
 			(select rownum as rnum,n.* from
				(select product_no, product_title, expert_no, product_type,
    				(select nvl(count(*),0) from wishlist_tbl w where w.product_no = p.product_no) as wishCount
				from product_tbl p order by wishCount desc)n) 
		where rnum between 1 and 10
 	</select> 
 	
 	<!-- 윤지 -->
	<select id="selectReviewList" parameterType="map" resultType="ProReviewMember">
		select *
		from 
			(select
				rownum as rnum, 
				r.review_star as reviewStar,
				m.member_no as memberNo,
				r.review_no as reviewNo,
				r.review_content as reviewContent,
				r.review_date as reviewDate,
				m.member_nick as memberNick,
				m.member_picturename as memberPictureName,
				m.member_picturepath as memberPicturePath
			from review_tbl r
			join member_tbl m
			on r.member_no = m.member_no
			where r.product_no = #{productNo}
			order by r.review_no desc)
		WHERE rnum between #{start} and #{end}
	</select>
	
	<!-- 여기서부터 chat관련 -->
	<!-- 윤지 -->
	<select id="selectPaymentState" parameterType="int" resultType="pay">
		select 
			pay_no as payNo, 
			member_no as memberNo, 
			product_no as productNo, 
			pay_state as payState
		from payment_tbl 
		where pay_no=#{payNo}
	</select>
	
	<!-- 윤지 -->
	<select id="selectReviewUploadCheck" parameterType="int" resultType="int">
		select count(*)as cnt from review_tbl where pay_no=#{payNo}
	</select>
	
	<!-- 윤지-->
	<insert id="insertChat" parameterType="map">
		insert into chat_tbl values(chat_seq.nextval, #{counselNo}, #{memberNo}, #{msg}, to_char(sysdate,'yyyy"년"mm"월"dd"일"'), to_char(sysdate,'hh24:mi'),1)
	</insert>
	
	<!-- 윤지 -->
	<select id="selectOneProduct2" parameterType="int" resultType="pro">
		select
			pro.product_no as productNo,
			product_type as productType,
			product_title as productTitle,
	        product_Category as productCategory,
			product_intro as productIntro,
			product_tag as productTag,
			product_content as productContent,
			cost,
			product_qst as productQst,
			product_ans as productAns,
			product_addr as productAddr,
			sale,
			product_option as productOption,
			product_imgpath as productImgPath
		from product_tbl pro 
        join payment_tbl pay
        on pro.product_no = pay.product_no
        where pay.pay_no=#{payNo}
	</select>
  
  	<!-- 윤지 -->
	<select id="selectCounsel" parameterType="int" resultType="counsel">
		select 
			counsel_no as counselNo, 
			member_no as memberNo, 
			expert_no as expertNo, 
			pay_no as payNo, 
			limit_time as limitTime,
			start_time as startTime
		from counsel_tbl 
		where pay_no=#{payNo}
	</select>
	
  	<!-- 윤지 -->
	<select id="selectChat" parameterType="int" resultType="chat">
		select 
			chat.chat_no as chatNo,
	        chat.counsel_no as counselNo,
	        chat.member_no as memberNo,
	        chat.chat_content as chatContent,
	        chat.chat_date as chatDate,
	        chat.chat_time as chatTime,
	        chat.chat_readcheck as chatReadcheck
        from chat_tbl chat
        join counsel_tbl counsel
        on chat.counsel_no = counsel.counsel_no
        join payment_tbl p
        on counsel.pay_no = p.pay_no
        where counsel.pay_no=#{payNo} order by chat_no asc       
  	</select>

	<select id="selectExpertNo" parameterType="int" resultType="expert">
		select expert_no as expertNo
		from expert_tbl where member_no=#{memberNo}
	</select>
	
	<select id="selectMemberNo" parameterType="int" resultType="member">
		select member_no as memberNo
		from member_tbl where member_no=#{memberNo}
	</select>
	

	<!-- 윤지 -->
	<update id="updateReadCheck" parameterType="int">
		update chat_tbl set chat_readcheck=0 where counsel_no=#{counselNo} and member_no=#{memberNo} and chat_readcheck=1
	</update>
	
	<!-- 윤지 -->
	<select id="selectPayment" parameterType="int" resultType="pay">
    
		select 
			c.counsel_no as counselNo, 
			c.member_no as memberNo, 
			c.expert_no as expertNo, 
			p.pay_no as payNo, 
			p.pay_state as payState
        from counsel_tbl c
        join payment_tbl p
        on c.pay_no = p.pay_no
        where counsel_no=#{counselNo}
	</select>
	<update id="updatePaymentState" parameterType="int">
		update payment_tbl set pay_state=2 where pay_no=#{payNo}
	</update>

  	<!--윤지 -->
	<insert id="insertReview" parameterType="review">
		INSERT INTO REVIEW_TBL VALUES(REVIEW_SEQ.NEXTVAL,#{payNo},#{memberNo},#{reviewTitle},#{reviewContent},#{reviewStar},to_char(sysdate,'yyyy.mm.dd'),#{productNo})
	</insert>
	
	<!-- 윤지 -->
	<select id="selectReview" parameterType="int" resultType="review">
		select 
			review_no as reviewNo, 
			pay_no as payNo,
			member_no as memberNo,
			review_title as reviewTitle,
			review_content as reviewContent,
			review_star as reviewStar,
			review_date as reviewDate,
			product_no as productNo
		from review_tbl where review_no=#{reviewNo}
	</select>
	
	<!-- 윤지 -->
	<select id="selectProductName" parameterType="int" resultType="pro">
		select p.product_title as productTitle
        from product_tbl p
        join review_tbl r
        on p.product_no = r.product_no
        where review_no=#{reviewNo}
	</select>
	
	<!-- 윤지 -->
	<update id="updateReview" parameterType="review">
		update review_tbl set review_title=#{reviewTitle}, review_content=#{reviewContent}, review_star=#{reviewStar} where review_no=#{reviewNo}
	</update>
	
	<!-- 윤지 -->
	<delete id="deleteReview" parameterType="int">
		delete from review_tbl where review_no=#{reviewNo}
	</delete>
	
	<!-- 윤지 -->
	<select id="overlapCheck" parameterType="int" resultType="int">
		select count(*)
        from review_tbl r
        join payment_tbl p
        on r.pay_no = p.pay_no
        where r.pay_no = #{payNo}
	</select>
	
	<!-- 윤지 -->
	<update id="updateStartTime" parameterType="map">
		update counsel_tbl set start_time=#{startTime} where counsel_no=#{counselNo} 
	</update>
	
	<!-- 영준 -->
	<select id="selectPopularNo" resultType="int">
	<![CDATA[
		select product_no from (select product_no from wishlist_tbl group by product_no order by count(product_no) desc) where rownum <= 10
	]]>
	</select>
	
	<!-- 영준 -->
	<select id="selectPopularProduct" parameterType="int" resultType="pro">
	select b.* from(
    (select 
    product_no as productNo, 
    expert_no as expertNo,
    expert_name as expertName,
    member_picturePath as memberPicturePath,
    member_no as memberNo, 
    product_Category as productCategory,
    product_title as productTitle,
    product_Intro as productIntro,
    member_picturename as memberPicturename,
    product_Tag as productTag,
    cost,
    sale,
    (cost)*(sale)/100 as salecost,
    (select nvl(count(*),0) from review_tbl rev where rev.product_no = p.product_no) as revCount,
    (select ROUND(avg(nvl(review_star, 0)),1) from review_tbl rev where rev.product_no = p.product_no)as reviewStar,
    product_imgpath as productImgPath,
    product_Imgename as productImgname
    from product_tbl p
    join expert_tbl e using (expert_no)
    join member_tbl using(member_no)) b)
    where productNo = #{value}
	</select>
	
	<!-- 대권 -->
	<select id="selectProductPayment" parameterType="int" resultType="pro">
		select 
			product_no as productNo,
			expert_no as expertNo,
			product_type as productType,
			product_title as productTitle,
			product_category as productCategory,
			product_intro as productIntro,
			product_tag as productTag,
			product_content as productContent,
			cost as cost,
			product_qst as productQst,
			product_ans as productAns,
			product_addr as productAddr,
			sale as sale,
			product_option as productOption,
			product_imgpath as productImgPath,
			product_imgename as productImgname				
		from product_tbl where product_no = #{productNo}
	</select>
</mapper>
	